// Longest path in Directed Acyclic Graph
#include <iostream>
#include <list>
#include <stack>
#define NINF INT_MIN
#define vertex 6

using namespace std;

// Graph is represented using adjacency list. Every node of adjacency list
// contains vertex number of the vertex to which edge connects. It also
// contains weight of the edge 
class AdjListNode
{
    int v;
    int weight;

public:
    AdjListNode(int V, int Weight);
    int GetV();
    int GetWeight();
};

AdjListNode::AdjListNode(int V, int Weight)
{
    v = V;
    weight = Weight;
}

int AdjListNode::GetV()
{
    return this->v;
}

int AdjListNode::GetWeight()
{
    return this->weight;
}

// Class to reprsent Graph through adjacency list
class Graph
{
    int V; // No. of vertices
    list<AdjListNode> * adj; // Pointer to an array containing adjacency list

    // A function used by longestPath
    void topologicalSortUtil(int v, bool visited[], stack<int> &Stack);

public:

    Graph(int v);
    ~Graph();
    void addEdge(const int & u, const int & v, const int & w);
    void longestPath(int src); // Find the longest path

};


Graph::Graph(int v)
{
    this->V = v;
    this->adj = new list<AdjListNode>[v];
}

Graph::~Graph()
{
    delete[] adj;
}

void Graph::addEdge(const int & u, const int & v, const int & w)
{
    AdjListNode Node(v, w);
    this->adj[u].push_back(Node);
}

void Graph::topologicalSortUtil(int v, bool visited[], stack<int> &Stack)
{
    // Mark the Node visited
    visited[v] = true;

    // Recur all the vertices adjacent to vertex v
    list<AdjListNode>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); i++)
    {
        AdjListNode node = *i;
        if (!visited[node.GetV()])
            topologicalSortUtil(node.GetV(), visited, Stack);
    }

    // Push current vertex to stack which stores topological sort
    Stack.push(v);
}

// longest function from src vertex
void Graph::longestPath(int src)
{
    stack<int> Stack;
    int dist[vertex];

    // Mark all the vertices not visited
    bool * visited = new bool[V];
    for (int i = 0; i < V; i++)
        visited[i] = false;

    // Call the recursicely the helper function to store topological order
    // for all the vertices
    for (int i = 0; i < V; i++)
    {
        if (!visited[i])
        {
            topologicalSortUtil(i, visited, Stack);
        }
    }

    // Initialize distances to all vertices as infinite and distance
    // to source as 0
    for (int i = 0; i < V; i++)
        dist[i] = NINF;
    dist[src] = 0;

    while (Stack.size() != 0)
    {
        int u = Stack.top();
        Stack.pop();

        // Update the distance from the adjacent vertex
        list<AdjListNode>::iterator i;
        if (dist[u] != NINF)
        {
            for (i = adj[u].begin(); i != adj[u].end(); i++)
            {
                if (dist[i->GetV()] < dist[u] + i->GetWeight())
                    dist[i->GetV()] = dist[u] + i->GetWeight();
            }
        }
    }

    // Print the calculated longest distances
    for (int i = 0; i < V; i++)
        (dist[i] == NINF) ? cout << "INF " : cout << dist[i] << " ";
}

// Driver program
int main()
{
    Graph* graph = new Graph(vertex);

    graph->addEdge(0, 1, 5);
    graph->addEdge(0, 2, 3);
    graph->addEdge(1, 3, 6);
    graph->addEdge(1, 2, 2);
    graph->addEdge(2, 4, 4);
    graph->addEdge(2, 5, 2);
    graph->addEdge(2, 3, 7);
    graph->addEdge(3, 5, 1);
    graph->addEdge(3, 4, -1);
    graph->addEdge(4, 5, -2);

    graph->longestPath(1);
    delete graph;
    return 0;
}
