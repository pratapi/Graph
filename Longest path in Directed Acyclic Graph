// Longest path in Directed Acyclic Graph
#include <iostream>
#include <list>

using namespace std;

// Graph is represented using adjacency list. Every node of adjacency list
// contains vertex number of the vertex to which edge connects. It also
// contains weight of the edge 
class AdjListNode
{
	int v;
	int weight;

public:
	AdjListNode(int V, int Weight);
	int GetV();
	int GetWeight();
};

AdjListNode::AdjListNode(int V, int Weight)
{
	v = V;
	weight = Weight;
}

int AdjListNode::GetV()
{
	return this->v;
}

int AdjListNode::GetWeight()
{
	return this->weight;
}

// Class to reprsent Graph through adjacency list
class Graph
{
	int V; // No. of vertices
	list<AdjListNode> * adj; // Pointer to an array containing adjacency list

public:

	Graph(int v);
	~Graph();
	void addEdge(const int & u, const int & v, const int & w);
	void longestPath(int src); // Find the longest path

};


Graph::Graph(int v)
{
	this->V = v;
	this->adj = new list<AdjListNode>[v];
}

Graph::~Graph()
{
	delete[] adj;
}

void Graph::addEdge(const int & u, const int & v, const int & w)
{
	AdjListNode Node(v, w);
	this->adj[u].push_back(Node);
}

// Driver program
int main()
{
	Graph* graph = new Graph(4);

	graph->addEdge(0, 1, 5);
	graph->addEdge(0, 2, 3);
	graph->addEdge(1, 3, 6);
	graph->addEdge(1, 2, 2);
	graph->addEdge(2, 4, 4);
	graph->addEdge(2, 5, 2);
	graph->addEdge(2, 3, 7);
	graph->addEdge(3, 5, 1);
	graph->addEdge(3, 4, -1);
	graph->addEdge(4, 5, -2);

	delete graph;
	return 0;
}
