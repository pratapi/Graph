// Program to print BFS traversal from a given source vertex. BFS(int s) 
#include <iostream>
#include <list>

using namespace std;

class Graph
{
    int V;
    list<int> * adj;
public:

    Graph(int v);
    ~Graph();
    void addEdge(const int & v, const int & w);
    void BFS(int & src);
    void DFS(int & src);
    void DFSUtil(int v, bool visited[]);

};

Graph::Graph(int v)
{
    this->V = v;
    this->adj = new list<int>[v+1];
}

Graph::~Graph()
{
    delete[] adj;
}

void Graph::addEdge(const int & v, const int & w)
{
    this->adj[v].push_back(w);
    this->adj[w].push_back(v);
}

void Graph::BFS(int & src)
{
    // Mark all the vertices as not visited 
    bool * visited = new bool[V];
    for (size_t i = 0; i <= this->V; i++)
    {
        visited[i] = false;
    }

    // Create a queue for BFS
    list<int> queue;

    // Mark the current node visited and enqueue it
    visited[src] = true;
    queue.push_back(src);

    // 'i' will used to get all adjacent vertices of a vertex
    list<int>::iterator i;

    while (!queue.empty())
    {
        // Dequeue the vertex from queue and print it
        src = queue.front();
        printf_s("%d  ", src);
        queue.pop_front();

        // Get all adjacent vertices of the dequeued vertex src
        // if a adjacent has not been visited , then mark it visited
        // and enqueue it
        for (i = adj[src].begin(); i != adj[src].end(); i++)
        {
            if (!visited[*i])
            {
                visited[*i] = true;
                queue.push_back(*i);
            }
        }
    }

    //delete [] visited;
}

void Graph::DFSUtil(int v, bool visited[])
{
    // Mark the current node as visited and print it
    visited[v] = true;
    cout << v << " ";

    // Recur for all the vertices adjacent to this vertex
    list<int>::iterator i;
    for (i = adj[v].begin(); i != adj[v].end(); ++i)
    if (!visited[*i])
        DFSUtil(*i, visited);
}

void Graph::DFS(int & src)
{
    // Mark all the vertices as not visited
    bool * visited = new bool[this->V];
    for (size_t i = 0; i <= this->V; i++)
        visited[i] = false;

    // Call the recursive helper function to print DFS traversal
    DFSUtil(src, visited);

}

int main()
{
    Graph* graph = new Graph(8);

    graph->addEdge(1, 2);
    graph->addEdge(1, 4);
    graph->addEdge(1, 7);
    graph->addEdge(2, 5);
    graph->addEdge(5, 7);
    graph->addEdge(2, 6);
    graph->addEdge(6, 4);
    graph->addEdge(6, 3);
    graph->addEdge(3, 8);

    printf_s("BFS : \n");
    int src(1);
    graph->BFS(src);
    printf_s("\n");

    printf_s("DFS : \n");
    src = 1;
    graph->DFS(src);

    delete graph;
    return 0;
}
