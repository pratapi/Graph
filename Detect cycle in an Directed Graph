// Detect cycle in an Directed Graph
#include <iostream>
#include <list>

using namespace std;

class Graph
{
    int V;
    list<int> * adj;
    bool isCyclicUtil(int v, bool visited[], bool *recStack);

public:

    Graph(int v);
    ~Graph();
    void addEdge(const int & v, const int & w);
    bool isCyclic();

};

Graph::Graph(int v)
{
    this->V = v;
    this->adj = new list<int>[v + 1];
}

Graph::~Graph()
{
    delete[] adj;
}

void Graph::addEdge(const int & v, const int & w)
{
    this->adj[v].push_back(w);
   // this->adj[w].push_back(v);
}

bool Graph::isCyclicUtil(int v, bool visited[], bool *recStack)
{
    if (visited[v] == false)
    {
        // Mark the current node as visited and part of recursion stack
        visited[v] = true;
        recStack[v] = true;

        // Recur for all the vertices adjacent to this vertex
        list<int>::iterator i;
        for (i = adj[v].begin(); i != adj[v].end(); ++i)
        {
            if (!visited[*i] && isCyclicUtil(*i, visited, recStack))
                return true;
            else if (recStack[*i])
                return true;
        }

    }
    recStack[v] = false;  // remove the vertex from recursion stack
    return false;
}

// Returns true if the graph contains a cycle, else false.
bool Graph::isCyclic()
{
    // Mark all the vertices as not visited and not part of recursion
    // stack
    bool *visited = new bool[V];
    bool *recStack = new bool[V];
    for (int i = 0; i < V; i++)
    {
        visited[i] = false;
        recStack[i] = false;
    }

    // Call the recursive helper function to detect cycle in different
    // DFS trees
    for (int i = 0; i < V; i++)
    if (isCyclicUtil(i, visited, recStack))
        return true;

    return false;
}

int main()
{
    Graph* graph = new Graph(4);

    graph->addEdge(0,1);
    graph->addEdge(1,2);
    graph->addEdge(2,3);
    graph->addEdge(3,4);
    graph->addEdge(4,5);
    graph->addEdge(3,5);

    if (graph->isCyclic())
        printf_s("Graph is cylic");
    else
        printf_s("Grpah is not cylic");


    delete graph;
    return 0;
}
